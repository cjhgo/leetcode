#include<cmath>
#include<iostream>
#include<queue>
#include<vector>
using namespace std;
struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode():left(NULL), right(NULL){}
     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 }; 


TreeNode* construct_from_list(vector<int> values)
{
    
    vector<TreeNode* > vt;
    for(auto e: values)
    {
        vt.push_back(new TreeNode(e));
    }
    TreeNode* x = vt[0];
    vt[0]->left=vt[1];
    vt[0]->right=vt[2];
    //!!!!!
    for(int i = 1; i <  values.size()/2-1; i++)
    {
        if(vt[i]->val != -1)
        {
            vt[i]->left =vt[2*i+1]->val == -1 ? NULL : vt[2*i+1];
            vt[i]->right = vt[2*i+2]->val == -1 ? NULL : vt[2*i+2];            
            // vt[i]->left =vt[2*i+1];
            // vt[i]->right = vt[2*i+2];
        }

    }
    return x;
}
void output_by_level(TreeNode*  root) 
{
        queue<TreeNode*> q;
        vector<int> record;
        q.push(root);
        int cnt = 0;
        int cur_level = 0;
        int null_cnt = 0;
        int level_cnt = 0;
        while(not q.empty())
        {
            TreeNode* x = q.front();
            if(x != NULL )
            {
                cout<<cur_level<<"#"<<cnt<<"#"<<x->val<<endl;
                q.push(x->left);
                q.push(x->right);
                record.push_back(1);
            }
            else
            {
                cout<<cur_level<<"#"<<cnt<<"#"<<"NULL"<<endl;
                record.push_back(0);
                q.push(NULL);
                q.push(NULL);
                ++null_cnt;
            }   
                
            q.pop();
            cnt++;
            level_cnt++;
            if(null_cnt == pow(2, cur_level))
                break;
            if(level_cnt == pow(2, cur_level))
            {
                ++cur_level;
                null_cnt = 0;
                level_cnt = 0;
            }

        }
        cout<<endl<<cur_level<<endl<<endl;
        cout<<endl<<endl;
        int max = -1;
        for(int i = 0; i < cur_level; i++)
        {
            int begin = pow(2, i) -1;
            int end = pow(2, (i+1)) -2;
            int left,right;
            left=right= 0;

            for(int j = begin; j <= end; j++)
            {
                cout<<record[j];
                if(record[j] == 1)
                {
                    left = j;
                    break;
                }
                    
            }
            for(int k = end; k  >= begin; k--)
                if(record[k] == 1)
                {
                    right= k;
                    break;
                }
                    
            cout<<"#"<<begin<<"#"<<end<<"#"<<right-left<<endl;
            if(right - left+1 > max)
                max = right - left+1;

        }
        cout<<"max is "<< max;
        cout<<endl<<endl;
        for(auto e : record)
        cout<<e<<endl;
}
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) 
    {
        queue<TreeNode*> q;
        vector<int> record;
        q.push(root);
        int cnt = 0;
        int cur_level = 0;
        int null_cnt = 0;
        int level_cnt = 0;
        int max = -1;
        while(not q.empty())
        {
            TreeNode* x = q.front();
            if(x != NULL )
            {
                q.push(x->left);
                q.push(x->right);
                record.push_back(1);
            }
            else
            {
                record.push_back(0);
                q.push(NULL);
                q.push(NULL);
                ++null_cnt;
            }                       
            q.pop();
            cnt++;
            level_cnt++;
            if(null_cnt == pow(2, cur_level))
                break;
            if(level_cnt == pow(2, cur_level))
            {
                ++cur_level;
                null_cnt = 0;
                level_cnt = 0;
            }

        }
        
        for(int i = 0; i < cur_level; i++)
        {
            int begin = pow(2, i) -1;
            int end = pow(2, (i+1)) -2;
            int left,right;
            left=right= 0;

            for(int j = begin; j <= end; j++)
            {
                if(record[j] == 1)
                {
                    left = j;
                    break;
                }
                    
            }
            for(int k = end; k  >= begin; k--)
            {
                if(record[k] == 1)
                {
                    right= k;
                    break;
                }
            }       
            if(right - left+1 > max)
                max = right - left+1;

        }
        return max;
    }
};

int main(int argc, const char* argv[])
{
    TreeNode root(1);
    TreeNode a(5);
    TreeNode b(3);
    TreeNode c(9);
    TreeNode d(3);
    TreeNode e(2);
    root.left = &d;
    root.right = &e;
    d.left = &a;
    d.right = &b;
    e.right = &c;
    //output_by_level(&root);
    vector<int> values= {1,5,8,9,7,7,8,1,4,8,1,9,0,8,7,1,7,4,2,9,8,2,4,-1,-1,9,-1,-1,-1,6,0,9,4,1,0,1,8,9,0,1,8,9,1,0,9,6,2,5,-1,2,3,0,2,4,8,8,8,5,0,0,9,4,9,1,-1,0,7,2,2,3,-1,6,1,0,8,9,9,9,4,8,4,3,4,4,0,-1,-1,8,3,8,-1,-1,0,-1,0,4,9,1,2,-1,4,4,0,4,3,5,5,7,4,1,6,-1,1,0,-1,-1,-1,2,8,7,7,-1,-1,0,2,5,5,9,3,3,-1,7,6,6,7,9,8,1,7,7,7,2,6,-1,7,-1,4,6,4,6,-1,-1,9,1,-1,-1,-1,5,5,5,4,2,2,8,5,1,1,3,1,3,7,-1,2,-1,9,1,4,4,7,7,-1,1,5,6,2,7,3,-1,9,1,-1,2,4,4,8,-1,-1,7,-1,6,-1,7,4,3,5,8,4,8,5,-1,-1,8,-1,-1,-1,4,4,-1,-1,-1,-1,8,3,5,5,-1,-1,-1,1,2,0,-1,-1,9,3,-1,8,3,7,1,8,9,0,1,8,2,-1,4,-1,-1,8,-1,-1,-1,-1,2,-1,4,8,5,5,3,1,-1,-1,6,-1,1,-1,-1,6,-1,-1,-1,-1,7,3,-1,-1,-1,8,6,4,-1,6,9,0,7,8,-1,-1,0,6,7,-1,-1,0,0,7,2,3,2,-1,0,2,3,-1,0,1,7,9,0,7,-1,-1,-1,-1,5,8,2,6,3,2,0,4,-1,-1,0,9,1,1,1,-1,1,3,-1,7,9,1,3,3,8,-1,-1,-1,-1,6,-1,-1,-1,-1,9,8,1,3,8,3,0,6,-1,-1,8,5,6,5,2,1,-1,5,-1,7,0,0,-1,9,3,9,-1,3,0,0,9,1,7,0,2,-1,6,8,5,-1,-1,-1,-1,-1,7,-1,2,5,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,-1,3,6,6,2,5,5,9,-1,-1,7,8,-1,-1,2,7,3,7,2,5,-1,1,3,4,-1,-1,8,3,6,9,-1,1,-1,-1,-1,-1,9,7,5,2,-1,5,-1,6,4,5,-1,1,2,0,6,-1,1,6,-1,-1,5,-1,7,8,4,7,8,6,4,-1,5,6,7,9,1,0,4,-1,-1,-1,6,4,8,4,5,-1,0,4,4,0,1,7,1,-1,1,-1,3,6,-1,-1,-1,-1,8,-1,5,0,7,5,-1,-1,5,8,-1,-1,3,-1,-1,8,-1,2,4,-1,-1,-1,-1,-1,-1,-1,9,-1,9,-1,9,-1,-1,-1,-1,7,1,-1,-1,2,-1,-1,5,5,5,5,6,4,-1,-1,1,6,4,0,-1,0,6,3,0,-1,5,5,-1,-1,-1,-1,2,-1,3,6,-1,3,0,5,0,1,0,3,4,9,9,2,7,3,8,6,9,-1,5,8,-1,-1,-1,-1,9,8,0,7,-1,-1,8,8,6,6,0,2,7,4,2,3,8,6,4,-1,8,-1,-1,-1,2,0,-1,1,3,5,4,2,2,5,8,8,-1,3,0,-1,1,6,0,-1,-1,9,-1,2,-1,6,8,2,-1,-1,5,-1,-1,-1,9,6,6,4,2,0,-1,-1,1,-1,0,-1,-1,-1,6,6,-1,-1,-1,4,7,9,-1,0,1,-1,-1,9,-1,-1,-1,4,-1,8,-1,-1,-1,-1,-1,-1,4,-1,6,-1,3,-1,-1,5,1,2,5,-1,0,7,8,-1,7,-1,-1,4,-1,4,4,-1,2,-1,6,-1,-1,-1,7,-1,-1,-1,-1,6,4,-1,6,-1,6,9,-1,-1,-1,9,6,-1,9,-1,3,-1,2,-1,7,7,-1,-1,0,-1,6,3,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,6,9,7,-1,7,-1,9,3,3,-1,-1,-1,-1,4,-1,-1,3,-1,-1,-1,3,9,-1,0,3,1,9,6,7,9,4,8,-1,-1,6,-1,1,3,7,-1,-1,-1,3,-1,2,-1,8,1,1,-1,-1,6,-1,7,3,5,-1,6,3,4,-1,-1,5,7,1,-1,-1,6,4,6,-1,-1,-1,-1,5,7,0,7,0,-1,5,8,5,5,4,5,-1,-1,-1,-1,-1,-1,1,7,-1,-1,7,-1,9,9,6,4,-1,-1,3,2,1,-1,0,-1,0,6,-1,-1,-1,1,5,-1,-1,-1,8,-1,-1,-1,-1,3,4,8,-1,-1,9,6,4,-1,-1,-1,-1,8,9,-1,1,-1,-1,-1,7,-1,-1,-1,-1,-1,9,-1,-1,-1,4,1,6,7,0,-1,-1,-1,7,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,4,-1,9,-1,-1,-1,-1,3,0,6,-1,5,-1,9,9,-1,-1,4,3,4,-1,-1,-1,-1,8,-1,5,-1,-1,-1,-1,5,2,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,2,1,8,5,-1,0,-1,0,3,2,4,5,-1,-1,-1,-1,-1,7,-1,-1,0,-1,0,-1,-1,-1,0,3,9,-1,-1,-1,-1,5,-1,-1,0,5,0,0,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,9,3,5,9,0,5,9,-1,-1,9,4,-1,0,2,0,-1,-1,7,-1,7,-1,5,7,8,7,-1,-1,-1,3,0,3,-1,-1,-1,-1,-1,4,5,-1,-1,2,3,-1,2,-1,-1,7,-1,-1,9,-1,-1,9,7,1,-1,-1,1,6,1,8,-1,-1,5,-1,-1,3,7,9,6,-1,-1,-1,-1,1,-1,-1,-1,3,7,3,2,3,3,-1,1,-1,-1,-1,1,-1,-1,4,3,4,8,7,-1,0,3,0,-1,1,1,-1,-1,-1,-1,-1,5,-1,6,0,-1,3,1,-1,6,-1,-1,4,0,1,-1,6,1,-1,-1,9,6,4,9,0,8,9,3,3,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,8,5,8,3,5,4,-1,6,-1,0,-1,-1,6,-1,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,3,-1,-1,1,-1,2,4,-1,-1,-1,6,-1,-1,-1,6,-1,5,-1,-1,-1,-1,1,-1,-1,3,-1,1,-1,7,1,-1,-1,7,1,3,4,8,-1,-1,-1,-1,-1,4,-1,-1,4,-1,-1,-1,7,-1,6,-1,-1,1,-1,-1,-1,7,3,3,-1,-1,-1,-1,3,0,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,9,-1,-1,6,6,5,2,-1,8,3,8,-1,-1,-1,-1,6,7,0,-1,-1,-1,-1,1,1,5,-1,0,5,-1,5,-1,-1,-1,1,2,-1,2,9,1,-1,2,4,1,-1,-1,-1,1,8,4,4,5,2,-1,-1,6,4,7,5,2,9,-1,4,-1,-1,-1,-1,-1,3,-1,-1,5,9,-1,-1,-1,-1,9,-1,9,-1,-1,-1,2,-1,1,9,-1,-1,-1,-1,-1,1,9,3,-1,-1,1,9,-1,5,2,1,0,-1,-1,1,9,8,4,7,-1,-1,5,7,-1,-1,-1,-1,1,2,8,-1,6,0,-1,-1,-1,-1,0,-1,-1,-1,6,-1,2,3,0,9,-1,-1,1,4,6,-1,8,-1,-1,5,-1,3,0,-1,6,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,2,5,8,6,9,-1,-1,-1,8,-1,-1,9,6,-1,-1,-1,-1,3,-1,-1,-1,-1,9,-1,-1,2,-1,-1,-1,-1,-1,-1,8,8,-1,-1,-1,-1,-1,9,-1,6,-1,2,5,-1,-1,1,2,-1,4,-1,-1,4,-1,-1,3,5,-1,3,3,-1,-1,1,-1,-1,-1,-1,4,-1,2,3,-1,4,5,3,-1,7,-1,-1,-1,7,6,-1,-1,1,3,-1,4,9,8,-1,-1,0,-1,3,4,-1,8,-1,1,-1,-1,2,2,-1,-1,4,-1,-1,-1,3,-1,-1,2,-1,-1,-1,4,-1,5,-1,-1,-1,-1,2,-1,5,-1,-1,-1,-1,-1,-1,2,7,5,-1,6,-1,-1,-1,-1,2,-1,0,-1,3,-1,1,-1,9,4,-1,3,-1,-1,-1,-1,-1,-1,-1,5,5,7,-1,-1,1,-1,4,6,-1,-1,-1,2,-1,5,9,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,7,-1,2,9,-1,-1,1,-1,-1,-1,1,6,-1,6,-1,-1,0,8,-1,4,-1,-1,-1,-1,4,-1,-1,0,-1,6,0,-1,-1,-1,4,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,4,2,6,4,5,3,4,-1,-1,5,-1,-1,-1,-1,4,-1,-1,3,6,2,0,-1,6,6,-1,-1,-1,-1,0,6,-1,-1,-1,3,9,4,-1,-1,-1,-1,-1,0,-1,-1,6,7,0,-1,9,2,-1,3,3,-1,-1,8,-1,3,-1,-1,-1,8,5,3,-1,2,4,-1,9,6,9,-1,-1,-1,-1,6,-1,6,-1,5,3,-1,-1,-1,-1,4,-1,-1,-1,9,0,9,7,1,1,-1,1,-1,1,6,-1,5,-1,6,-1,-1,1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,3,-1,6,1,-1,0,2,-1,-1,0,-1,-1,0,-1,-1,-1,-1,-1,3,-1,-1,8,-1,-1,5,3,3,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,0,8,7,-1,-1,8,1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,2,-1,2,6,-1,-1,-1,-1,-1,-1,-1,1,5,0,-1,-1,2,-1,7,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,3,-1,-1,4,-1,-1,2,-1,-1,-1,-1,0,3,-1,-1,-1,-1,-1,7,-1,8,-1,-1,-1,-1,8,5,-1,3,4,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,7,-1,-1,-1,4,0,3,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,2,-1,-1,-1,8,2,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,2,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5};
    //{1,5,8,9,7,7,8};
    TreeNode * x = construct_from_list(values);
    cout<<values.size()<<endl;
    output_by_level(x);
    Solution s;
    cout<<s.widthOfBinaryTree(x);
}